description = 'Gradle plugin to deploy applications to Kubernetes and DC/OS Marathon'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1-rc2'
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1'
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
    }
}

apply plugin: 'org.sonarqube'

sonarqube {
    properties {
        property "sonar.java.coveragePlugin", "jacoco"
    }
}

allprojects {
    group = 'de.qaware.cloud.deployer'
    version = '1.0.0'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'org.unbroken-dome.test-sets'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    license {
        skipExistingHeaders = true
        header rootProject.file('LICENSE_HEADER')
        includes(["**/*.java"])
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    dependencies {
        compile 'commons-io:commons-io:2.5'
        compile 'org.apache.commons:commons-lang3:3.4'
        compile 'org.slf4j:slf4j-api:1.7.21'

        testCompile 'junit:junit:4.11'
        testCompile 'org.mockito:mockito-core:1.10.19'
        testCompile 'org.slf4j:slf4j-simple:1.7.21'
        testCompile 'com.github.tomakehurst:wiremock:2.1.12'
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    tasks.withType(Test) {
        ignoreFailures = true
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    artifacts {
        tests testJar
    }

    testSets {
        integrationTest { dirName = 'integration-test' }
    }

    sonarqube {
        properties {
            property "sonar.jacoco.itReportPath", "${buildDir}/jacoco/integrationTest.exec"
            property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec"
        }
    }
}
